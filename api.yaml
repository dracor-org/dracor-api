openapi: "3.0.0"
info:
  version: 0.2.0
  title: DraCor API
  contact:
    email: "ffischer@hse.ru"
  termsOfService: "https://dracor.org"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: https://dracor.org/api
paths:
  /info:
    get:
      summary: API info
      description: >-
        Shows version numbers of the dracor-api app and the underlying
        eXist-db.
      operationId: api-info
      tags: [public]
      responses:
        '200':
          description: Returns JSON object
          content:
            application/json:
              example:
                {
                    "existdb": "4.1.0",
                    "name": "DraCor",
                    "status": "beta",
                    "version": "0.20.1"
                }

  /corpora:
    get:
      summary: List available corpora
      operationId: list-corpora
      tags: [public]
      parameters:
        - name: include
          in: query
          description: Include metrics for each corpus
          required: false
          schema:
            type: string
            enum: [metrics]
      responses:
        '200':
          description: Returns list of available corpora
          content:
            application/json:
              schema:
                type: array
              example:
                [
                  {
                    "name": "ger",
                    "title": "German Drama Corpus",
                    "repository": "https://github.com/dracor-org/gerdracor",
                    "uri": "https://dracor.org/api/corpora/ger",
                    "metrics": {
                      "characters": 10001,
                      "female": 1308,
                      "male": 3953,
                      "plays": 471,
                      "sp": 327696,
                      "stage": 139169,
                      "text": 471,
                      "updated": "2019-01-12T00:55:59.145+01:00",
                      "wordcount": {
                        "sp": 7909927.0,
                        "stage": 880356,
                        "text": 8275863.0
                      }
                    },
                  },
                  {
                    "name": "rus",
                    "title": "Russian Drama Corpus",
                    "repository": "https://github.com/dracor-org/rusdracor",
                    "uri": "https://dracor.org/api/corpora/rus",
                    "metrics": {
                      "characters": 2440,
                      "female": 564,
                      "male": 1789,
                      "plays": 141,
                      "sp": 73485,
                      "stage": 31949,
                      "text": 141,
                      "updated": "2019-01-11T22:48:53.865+01:00",
                      "wordcount": {
                        "sp": 1388515.0,
                        "stage": 140415,
                        "text": 1468669.0
                      }
                    }
                  },
                  {
                    "name": "shake",
                    "title": "Shakespeare Drama Corpus",
                    "repository": "https://github.com/dracor-org/shakedracor",
                    "uri": "https://dracor.org/api/corpora/shake",
                    "metrics": {
                      "characters": 1433,
                      "female": 0,
                      "male": 0,
                      "plays": 37,
                      "sp": 31066,
                      "stage": 10450,
                      "text": 37,
                      "updated": "2019-01-11T22:53:29.419+01:00",
                      "wordcount": {
                        "sp": 876744,
                        "stage": 41230,
                        "text": 908286
                      }
                    }
                  }
                ]
    post:
      summary: Add new corpus
      operationId: post-corpora
      tags: [admin]
      requestBody:
        description: Corpus meta data
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - title
              properties:
                name:
                  type: string
                  description: corpus name
                title:
                  type: string
                  description: corpus title
                repository:
                  type: string
                  description: repository URL
                archive:
                  type: string
                  summary: >-
                    URL of ZIP archive containing TEI files of the corpus
                  description: >
                    The TEI file are expected to be placed in a `tei`
                    subdirectory. Other files will be ignored when loading the
                    archive.
            example: |
              {
                "name": "rus",
                "title": "Russian Drama Corpus",
                "repository": "https://github.com/dracor-org/rusdracor"
              }
      responses:
        '200':
          description: Returns corpus metadata
          content:
            application/json:
              schema:
                type: object
        '409':
          description: Corpus already exists
        '400':
          description: Posted data lacks required properties or is malformed

  /corpora/{corpusname}:
    get:
      summary: List corpus content
      description: >-
        Lists all plays available in the corpus including the id, title,
        author(s) and other meta data.
      operationId: list-corpus-content
      tags: [public]
      parameters:
        - name: corpusname
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns object representing corpus contents
          content:
            application/json:
              schema:
                type: object
                required:
                  - title
                  - dramas
                properties:
                  title:
                    type: string
                    description: corpus title
                  dramas:
                    type: array
                    description: array of plays
                    items:
                      type: object
        '404':
          description: Corpus not found
    post:
      summary: Load corpus data from its repository
      description: >-
        This endpoint requires authorization.

        Posting `{"load": true}` to the corpus URI reloads the data for this
        corpus from its repository (if defined).
      operationId: load-corpus
      tags: [admin]
      parameters:
        - name: corpusname
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - load
              properties:
                load:
                  type: boolean
            example: |
              {"load": true}
      responses:
        '202':
          description: Corpus update has been scheduled
          content:
            application/json:
              schema:
                type: object
              example: |
                {
                  "message": "corpus update scheduled"
                }
        '404':
          description: Corpus not found
        '409':
          description: >-
            Corpus update could not be scheduled.

            This is the response when another update has not yet finished.
    delete:
      summary: Remove corpus from database
      operationId: delete-corpus
      tags: [admin]
      parameters:
        - name: corpusname
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Corpus deleted
        '404':
          description: Corpus not found


  /corpora/{corpusname}/metadata:
    get:
      summary: List of metadata for all plays in a corpus
      operationId: corpus-metadata
      tags: [public]
      parameters:
        - name: corpusname
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a list of metadata for all plays
          content:
            application/json:
              schema:
                type: array
                items: object
            text/csv:
              schema:
                type: string

  /corpora/{corpusname}/metadata.csv:
    get:
      summary: List of metadata for all plays in a corpus
      description: >-
        This endpoint is deprecated. Please use `/corpora/{corpusname}/metadata`
        with an appropriate `Accept` header instead.
      operationId: corpus-metadata-csv
      tags: [public]
      deprecated: true
      parameters:
        - name: corpusname
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a comma separated list of metadata for all plays
          content:
            text/csv:
              schema:
                type: string

  /corpora/{corpusname}/play/{playname}:
    get:
      summary: Get metadata and network metrics for a single play
      operationId: play-info
      tags: [public]
      parameters:
        - name: corpusname
          in: path
          required: true
          schema:
            type: string
        - name: playname
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns an object with play meta data
          content:
            application/json:
              schema:
                type: object
    delete:
      summary: Remove a single play from the corpus
      operationId: play-delete
      tags: [admin]
      parameters:
        - name: corpusname
          in: path
          required: true
          schema:
            type: string
        - name: playname
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Play has been removed
        '404':
          description: No such play under this URI

  /corpora/{corpusname}/play/{playname}/metrics:
    get:
      summary: Get network metrics for a single play
      operationId: play-metrics
      tags: [public]
      parameters:
        - name: corpusname
          in: path
          required: true
          schema:
            type: string
        - name: playname
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns an object with metrics data
          content:
            application/json:
              schema:
                type: object

  /corpora/{corpusname}/play/{playname}/tei:
    get:
      summary: Get TEI document of a single play
      operationId: play-tei
      tags: [public]
      parameters:
        - name: corpusname
          in: path
          required: true
          schema:
            type: string
        - name: playname
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns TEI document
          content:
            application/xml:
              schema:
                type: string
    put:
      summary: Add new or update existing TEI document
      description: |
        When sending a PUT request to a new play URI, the request body is stored
        in the database as a new document accessible under that URI. If the URI
        already exists the corresponding TEI document is updated with the
        request body.

        The `playname` parameter of a new URI must consist of lower case ASCII
        characters, digits and/or dashes only.
      operationId: play-tei-put
      tags: [admin]
      parameters:
        - name: corpusname
          in: path
          required: true
          schema:
            type: string
        - name: playname
          in: path
          required: true
          schema:
            type: string
            pattern: "[a-z0-9]+([-a-z0-9]?[a-z0-9])?"
      requestBody:
        description: TEI document
        content:
          application/xml:
            schema:
              type: string
      responses:
        '200':
          description: TEI document has been stored
          content:
            application/xml:
              schema:
                type: string
        '400':
          description: >-
            The request body is not a valid TEI document or the `playname` is
            invalid.
        '404':
          description: >-
            There is no corpus with the given `corpusname`.

  /corpora/{corpusname}/play/{playname}/rdf:
    get:
      summary: Get RDF document for a single play
      operationId: play-rdf
      tags: [public]
      parameters:
        - name: corpusname
          in: path
          required: true
          schema:
            type: string
        - name: playname
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns RDF document
          content:
            application/xml:
              schema:
                type: string

  /corpora/{corpusname}/play/{playname}/cast:
    get:
      summary: Get a list of characters of a play
      operationId: get-cast
      tags: [public]
      parameters:
        - name: corpusname
          in: path
          required: true
          schema:
            type: string
        - name: playname
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns list of characters
          content:
            application/json:
              schema:
                type: array
                items: object
              example: |
                [
                  {
                    "numOfSpeechActs": 171,
                    "gender": "MALE",
                    "numOfScenes": 21,
                    "name": "Городничий",
                    "numOfWords": 4985,
                    "isGroup": false,
                    "id": "gorodnichij"
                  },
                  {
                    "numOfSpeechActs": 49,
                    "gender": "MALE",
                    "numOfScenes": 8,
                    "name": "Аммос Федорович",
                    "numOfWords": 748,
                    "isGroup": false,
                    "id": "ammos_fedorovich_ljapkin_tjapkin"
                  },
                  {
                    "numOfSpeechActs": 50,
                    "gender": "MALE",
                    "numOfScenes": 9,
                    "name": "Артемий Филиппович Земляника",
                    "numOfWords": 735,
                    "isGroup": false,
                    "id": "artemij_filippovich_zemljanika"
                  },
                  {
                    "numOfSpeechActs": 24,
                    "gender": "MALE",
                    "numOfScenes": 8,
                    "name": "Лука Лукич",
                    "numOfWords": 291,
                    "isGroup": false,
                    "id": "luka_lukich"
                  }
                ]
            text/csv:
              schema:
                type: string
              example: |
                id,name,gender,isGroup,numOfScenes,numOfSpeechActs,numOfWords
                "gorodnichij","Городничий","MALE","false","21","171","4985"
                "ammos_fedorovich_ljapkin_tjapkin","Аммос Федорович","MALE","false","8","49","748"
                "artemij_filippovich_zemljanika","Артемий Филиппович Земляника","MALE","false","9","50","735"
                "luka_lukich","Лука Лукич","MALE","false","8","24","291"

  /corpora/{corpusname}/play/{playname}/networkdata/csv:
    get:
      summary: Get network data of a play as CSV
      operationId: network-csv
      tags: [public]
      parameters:
        - name: corpusname
          in: path
          required: true
          schema:
            type: string
        - name: playname
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns CSV file
          content:
            text/csv:
              schema:
                type: string

  /corpora/{corpusname}/play/{playname}/networkdata/gexf:
    get:
      summary: Get network data of a play as GEXF
      operationId: network-gexf
      tags: [public]
      parameters:
        - name: corpusname
          in: path
          required: true
          schema:
            type: string
        - name: playname
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns GEXF file
          content:
            application/xml:
              schema:
                type: string

  /corpora/{corpusname}/play/{playname}/segmentation:
    get:
      summary: Get a list of segments and characters of a play
      description: |
        This endpoint is deprecated. All the information is now available as
        JSON from `/corpora/{corpusname}/play/{playname}`. Please use that
        endpoint instead.
      operationId: play-segments-xml
      deprecated: true
      tags: [public]
      parameters:
        - name: corpusname
          in: path
          required: true
          schema:
            type: string
        - name: playname
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns list of segments
          content:
            application/xml:
              schema:
                type: string
            text/csv:
              schema:
                type: string

  /corpora/{corpusname}/play/{playname}/spoken-text:
    get:
      summary: Get spoken text of a play (excluding stage directions)
      operationId: play-spoken-text
      tags: [public]
      parameters:
        - name: corpusname
          in: path
          required: true
          schema:
            type: string
        - name: playname
          in: path
          required: true
          schema:
            type: string
        - name: gender
          in: query
          required: false
          schema:
            type: string
            enum: [FEMALE, MALE, UNKNOWN]
      responses:
        '200':
          description: Returns plain text document
          content:
            text/plain:
              schema:
                type: string

  /corpora/{corpusname}/play/{playname}/spoken-text-by-character:
    get:
      summary: Get spoken text for each character of a play
      operationId: play-spoken-text-by-character
      tags: [public]
      parameters:
        - name: corpusname
          in: path
          required: true
          schema:
            type: string
        - name: playname
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns texts per character
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    label:
                      type: string
                    isGroup:
                      type: boolean
                    gender:
                      type: string
                      enum: [FEMALE, MALE, UNKNOWN]
                    text:
                      type: array
                      items:
                        type: string
            text/csv:
              schema:
                type: string

  /corpora/{corpusname}/play/{playname}/stage-directions:
    get:
      summary: Get all stage directions of a play
      operationId: play-stage-directions
      tags: [public]
      parameters:
        - name: corpusname
          in: path
          required: true
          schema:
            type: string
        - name: playname
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns plain text document
          content:
            text/plain:
              schema:
                type: string

  /corpora/{corpusname}/play/{playname}/stage-directions-with-speakers:
    get:
      summary: Get all stage directions of a play including speakers
      operationId: play-stage-directions-with-speakers
      tags: [public]
      parameters:
        - name: corpusname
          in: path
          required: true
          schema:
            type: string
        - name: playname
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns plain text document
          content:
            text/plain:
              schema:
                type: string

  /id/{id}:
    get:
      summary: Resolve DraCor play ID
      description: |
        When "application/rdf+xml" is requested via the `Accept` header, this
        endpoint returns an RDF representation of the play identified by $id.
        Otherwise it redirects to the DraCor URL for that play.
      operationId: resolve-id
      tags: [public]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: ger000023
      responses:
        '200':
          description: Returns RDF document
          content:
            application/rdf+xml:
              schema:
                type: string
        '302':
          description: Redirect to dracor.org URL
        '404':
          description: No play found for this ID

  /webhook/github:
    post:
      summary: GitHub Webhook
      description: >-
        Endpoint accepting POST requests from Github (see
        https://developer.github.com/webhooks/). We currently only handle push
        events on the master branch.
      operationId: github-webhook
      tags: [webhook]
      parameters:
        - in: header
          name: User-Agent
          required: true
          schema:
            type: string
            pattern: "GitHub-Hookshot/.*"
        - in: header
          name: X-GitHub-Delivery
          required: true
          schema:
            type: string
          example: "4e16d4dc-1d87-11e9-830d-68e2a0832130"
        - in: header
          name: X-GitHub-Event
          required: true
          schema:
            type: string
            enum: ["push"]
        - in: header
          name: X-Hub-Signature
          required: true
          schema:
            type: string
          example: "sha1=6da21762fada5c1d0205c6e42xxxxxxxxxx357c0"
      requestBody:
        description: >-
          Webhook payload (see https://developer.github.com/webhooks/#payloads)
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: >-
            Webhook delivery has been recieved, a status message is being
            returned.
          content:
            application/json:
              schema:
                type: object
              example: |
                {
                  "message": "Delivery accepted.",
                  "result": "/db/data/dracor/webhook/20190121213010-xxx.xml",
                  "scheduled": true
                }
